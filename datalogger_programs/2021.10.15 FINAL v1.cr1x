' ██████╗███████╗██╗   ██╗███╗   ███╗    ██████╗ ██╗   ██╗ ██████╗ ██╗   ██╗
'██╔════╝██╔════╝██║   ██║████╗ ████║    ██╔══██╗██║   ██║██╔═══██╗╚██╗ ██╔╝
'██║     ███████╗██║   ██║██╔████╔██║    ██████╔╝██║   ██║██║   ██║ ╚████╔╝ 
'██║     ╚════██║██║   ██║██║╚██╔╝██║    ██╔══██╗██║   ██║██║   ██║  ╚██╔╝  
'╚██████╗███████║╚██████╔╝██║ ╚═╝ ██║    ██████╔╝╚██████╔╝╚██████╔╝   ██║   
' ╚═════╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝    ╚═════╝  ╚═════╝  ╚═════╝    ╚═╝   
'##########################################################################
'Code made by Sophie Scopazzi with collaboration from:
'      Dr. Cifuentes 
'      Dominic Terrusa
'      Aurora Thomas
'      Brian Olsen <bolsen@campbellsci.com>
'##########################################################################

Public BattV	:	Units BattV=V    
Public PTemp	:	Units PTemp=Deg_C

' _____   ____ ___    __   __  __  _ __  ___  
'| __\ \_/ /__(_  | /' _/ /__\|  \| | _\| __| 
'| _| > , < \/ / /  `._`.| \/ | | ' | v | _|  
'|___/_/ \_\__/___| |___/ \__/|_|\__|__/|___| 
'############################################
Public EXO(24)
Alias EXO(1)=Chlorophyll          : Units Chlorophyll=RFU
Alias EXO(2)=nLFCond              : Units nLFCond=microSimens/cm
Alias EXO(3)=Pressure             : Units Pressure=psia
Alias EXO(4)=Turbidity            : Units Turbidity=FNU
Alias EXO(5)=Temp                 : Units Temp=C
Alias EXO(6)=Cond                 : Units Cond=microSimens/cm
Alias EXO(7)=D_OX                 : Units D_OX=%Sat
Alias EXO(8)=Sal                  : Units Sal=PSU
Alias EXO(9)=TSS                  : Units TSS=mg/L
Alias EXO(10)=VerticalPosition    : Units VerticalPosition=m
Alias EXO(11)=Depth               : Units Depth=m
Alias EXO(12)=D_OX2               : Units D_OX2=%Local
Alias EXO(13)=SpCond              : Units SpCond=microSimens/cm
Alias EXO(14)=WiperPosition       : Units WiperPosition=volt
Alias EXO(15)=BPower              : Units BPower=volt
Alias EXO(16)=fDOM                : Units fDOM=QSU
Alias EXO(17)=D_OX3               : Units D_OX3=mg/L
Alias EXO(18)=Phycoerythrin       : Units Phycoerythrin=RFU
Alias EXO(19)=pH                  : Units pH=pH
Alias EXO(20)=CablePower          : Units CablePower=volt
Alias EXO(21)=fDOM2               : Units fDOM2=RFU
Alias EXO(22)=ORP                 : Units ORP=mV
Alias EXO(23)=TDS                 : Units TDS=mg/L
Alias EXO(24)=pH2                 : Units pH2=mV

' __ __ ___ _____    __ _____ __ _____ _  __  __  _  
'|  V  | __|_   _| /' _/_   _/  \_   _| |/__\|  \| | 
'| \_/ | _|  | |   `._`. | || /\ || | | | \/ | | ' | 
'|_| |_|___| |_|   |___/ |_||_||_||_| |_|\__/|_|\__|
'###################################################
Dim MSData(5)	'Declare variable array, alloting space for the following
Public BP 					        	  :	Units BP=hPa					        'Barometric pressure
Public RH 					        	  :	Units RH=%					          'Relative humidity
Public AirTemp 			          	:	Units AirTemp=Deg_C		        'Air temperature
Public DP 					          	:	Units DP=Deg_C				        'Dewpoint	
Public MetSENS_Status As Long 	:	Units MetSENS_Status=unitless 'Status code of MetSENS

Dim N(9) As Long            'Declare variable array, allotting space for the following
Alias N(1)=Good_Sample 			'No fault, good samples
Alias N(2)=Fault_Wind 			'Wind fault
Alias N(3)=Fault_Temperature'Temperature fault
Alias N(4)=Fault_Dewpoint   'Dewpoint fault
Alias N(5)=Fault_Humidity   'Humidity fault
Alias N(6)=Fault_Pressure   'Pressure sensor warning
Alias N(7)=Fault_Compass 		'Compass fault
Alias N(8)=Fault_Undefined  'Undefined fault
Alias N(9)=Fault_Checksum 	'Checksum error

' ___  __  ___  
'| _,\/  \| _ \ 
'| v_/ /\ | v / 
'|_| |_||_|_|_\ 
'##############
Public PAR_atmo_Den		:	Units PAR_atmo_Den=umol/s/m^2
Public PAR_atmo_Tot		:	Units PAR_atmo_Tot=umol/m^2
Public PAR_aqua1_Den	:	Units PAR_aqua1_Den=umol/s/m^2
Public PAR_aqua1_Tot	:	Units PAR_aqua1_Tot=umol/m^2 
Public PAR_aqua2_Den	:	Units PAR_aqua2_Den=umol/s/m^2
Public PAR_aqua2_Tot	:	Units PAR_aqua2_Tot=umol/m^2 

' _ __ __ _  _  
'| |  V  | || | 
'| | \_/ | \/ | 
'|_|_| |_|\__/ 
'##############
Dim IMUVector(16) 'Declare variable array, alloting space for the following
Alias IMUVector(1)=fAccelX        : Units fAccelX=g
Alias IMUVector(2)=fAccelY        : Units fAccelY=g
Alias IMUVector(3)=fAccelZ        : Units fAccelZ=g
Alias IMUVector(4)=fAngRateX      : Units fAngRateX=rad/s
Alias IMUVector(5)=fAngRateY      : Units fAngRateY=rad/s
Alias IMUVector(6)=fAngRateZ      : Units fAngRateZ=rad/s
Alias IMUVector(7)=fRoll          : Units fRoll=rad
Alias IMUVector(8)=fPitch         : Units fPitch=rad
Alias IMUVector(9)=fYaw           : Units fYaw=rad
Alias IMUVector(10)=fQ1           : Units fQ1=unitless
Alias IMUVector(11)=fQ2           : Units fQ2=unitless
Alias IMUVector(12)=fQ3           : Units fQ3=unitless
Alias IMUVector(13)=fQ4           : Units fQ4=unitless
Alias IMUVector(14)=fGX           : Units fGX=g  'gravitational acceleration 
Alias IMUVector(15)=fGY           : Units fGY=g
Alias IMUVector(16)=fGZ           : Units fGZ=g

Dim dLat As Double        'latitude 
Dim dLon As Double        'longitude
Dim dHEllipsoid As Double 'height above the reference ellipsoid
Dim dHMSL As Double       'mean sea level (geoid)
Dim fHAccuracy As Float   '??
Dim fVAccuracy As Float   '??
Dim iValidFlags As Float  '??

Const GX5_BUFFER = 300
Const IMU_RESPONSE_SIZE = 80
Const GPS_RESPONSE_SIZE = 50
Const GX5_RESPONSE_SIZE = IMU_RESPONSE_SIZE + GPS_RESPONSE_SIZE
Dim sGX5Buffer As String * GX5_BUFFER
Dim sGX5ComBuffer As String * GX5_BUFFER

' _   _  _ __  _ __   
'| | | || |  \| | _\  
'| 'V' || | | ' | v | 
'!_/ \_!|_|_|\__|__/  
'####################
Dim WSVector(4)
Alias WSVector(1) = fWSV1    :  Units fWSV1 = m/s
Alias WSVector(2) = fWSV2    :  Units fWSV2 = m/s
Alias WSVector(3) = fWSV3    :  Units fWSV3 = m/s
Alias WSVector(4) = fWSC     :  Units fWSC = DegC

Const WS_BUFFER = 80
Const WS_RESPONSE_SIZE = 37
Dim sWSBuffer As String * WS_BUFFER
Dim iWSDiag As Long
Dim iWSValue As Long

'Timing constants for wind: check carefully
Const SCAN_PERIOD_MS = 25
Const IMU_PERIOD_MS = 100
Const GPS_PERIOD_MS = 1000
Const WS_PERIOD_MS = 50

Dim iNGX5Ready As Long
Dim iGX5WriteIndex As Long
Dim iGX5Payload As Long
Dim iNIMUReads As Long
Dim iNGPSReads As Long
Dim iNIMU_GPSReads As Long
Dim iNGPS_IMUReads As Long
Dim iNBothErrors As Long
Dim iNGX5Errors As Long
Dim iNChkErrors As Long
Dim iIMUChecksum1 As Long
Dim iIMUChecksum2 As Long
Dim iGPSChecksum1 As Long
Dim iGPSChecksum2 As Long
Dim iNWSRead As Long

Function FletcherChecksum(iOffset As Long, iNBytes As Long) As Long
    Dim sum(3) As Long
    Dim i As Long

    sum(1) = 0
    sum(2) = 0
    For i = 0 To (iNBytes - 1)
        MoveBytes(sum(3), 3, sGX5Buffer, iOffset + i, 1)
        sum(1) += sum(3)
        sum(2) += sum(1)
    Next i

    sum(1) = (sum(1) MOD 256) << 8
    sum(2) = sum(2) MOD 256
    Return sum(1) + sum(2)
EndFunction

Function ParseIMU(iOffset As Long)
    iIMUChecksum1 = FletcherChecksum(iOffset, IMU_RESPONSE_SIZE - 2)
    MoveBytes(iIMUChecksum2, 2, sGX5Buffer, iOffset + IMU_RESPONSE_SIZE - 2, 2)
    If (iIMUChecksum1 = iIMUChecksum2) Then
        'Move data to floats: field payload is data bytes + 2
        MoveBytes(fAccelX, 0, sGX5Buffer, iOffset + 6, 12)      '04, 14 byte payload
        MoveBytes(fAngRateX, 0, sGX5Buffer, iOffset + 20, 12)   '05, 14 byte payload
        MoveBytes(fRoll, 0, sGX5Buffer, iOffset + 34, 12)       '0C, 14 byte payload
        MoveBytes(fQ1, 0, sGX5Buffer, iOffset + 48, 16)         '0A, 18 byte payload
        MoveBytes(fGX, 0, sGX5Buffer, iOffset + 66, 12)         '11, 14 byte payload
    Else
        iNChkErrors = iNChkErrors + 1
    EndIf
EndFunction

Function ParseGPS(iOffset As Long)
    iGPSChecksum1 = FletcherChecksum(iOffset, GPS_RESPONSE_SIZE - 2)
    MoveBytes(iGPSChecksum2, 2, sGX5Buffer, iOffset + GPS_RESPONSE_SIZE - 2, 2)
    If (iGPSChecksum1 = iGPSChecksum2) Then
        'Move data to floats: field payload is data bytes + 2
        MoveBytes(dLat, 0, sGX5Buffer, iOffset + 6, 8)
        MoveBytes(dLon, 0, sGX5Buffer, iOffset + 14, 8)
        MoveBytes(dHEllipsoid, 0, sGX5Buffer, iOffset + 22, 8)
        MoveBytes(dHMSL, 0, sGX5Buffer, iOffset + 30, 8)
        MoveBytes(fHAccuracy, 0, sGX5Buffer, iOffset + 38, 4)
        MoveBytes(fVAccuracy, 0, sGX5Buffer, iOffset + 42, 4)
        MoveBytes(iValidFlags, 2, sGX5Buffer, iOffset + 46, 2)
    Else
        iNChkErrors = iNChkErrors + 1
    EndIf
EndFunction

Function GX5Byte(iOffset As Long) As Long
    Dim iReturn As Long
    MoveBytes(iReturn, 3, sGX5Buffer, iOffset, 1)
    Return iReturn
EndFunction
' __   __ _____ __    _____ __  __ _   ___  __  
'| _\ /  \_   _/  \  |_   _/  \|  \ | | __/' _/ 
'| v | /\ || || /\ |   | || /\ | -< |_| _|`._`. 
'|__/|_||_||_||_||_|   |_||_||_|__/___|___|___/ 
'##############################################
DataTable (Batt,1,-1)
  TableFile ("CRD:Battery_hr",8,-1,0,60,Min,0,0)
  DataInterval (0,2,Min) 
  Sample (1,BattV,Float)
  Sample (1,PTemp,Float)
EndTable

DataTable (EXO_data,1,-1)
  TableFile ("CRD:EXO_hr",8,-1,0,60,Min,0,0)
  DataInterval (0,2,Min,1) 'Can't go faster than 2min...
  Sample (24,EXO(1),FP2)
EndTable

DataTable(MS3,True,-1)
  TableFile ("CRD:MS3_hr",8,-1,0,60,Min,0,0)
  DataInterval(0,2,Min,0)
  Sample (1,BP,Float)
  Sample (1,RH,Float)
  Sample (1,AirTemp,Float)  
  Sample (1,DP,Float)
  'Average (1,AirTemp,FP2,AirTemp = NAN)
  'Maximum (1,AirTemp,FP2,AirTemp = NAN,True)
  'Minimum (1,AirTemp,FP2,AirTemp = NAN,True)
EndTable

DataTable(PAR_atmo,True,-1)
  TableFile("CRD:PAR_atmo_hr",8,-1,0,60,Min,0,0) 
	DataInterval(0,5,Sec,0)
	Sample(1,PAR_atmo_Den,Float)'PAR Flux Density umol
	Sample(1,PAR_atmo_Tot,Float) 'PAR Total umols
EndTable

DataTable(PAR_aqua1,True,-1)
  TableFile("CRD:PAR_aqua1_hr",8,-1,0,60,Min,0,0) 
	DataInterval(0,5,Sec,0)
	Sample(1,PAR_aqua1_Den,Float)'PAR Flux Density umol
	Sample(1,PAR_aqua1_Tot,Float) 'PAR Total umols
EndTable

DataTable(PAR_aqua2,True,-1)
  TableFile("CRD:PAR_aqua2_hr",8,-1,0,60,Min,0,0) 
	DataInterval(0,5,Sec,0)
	Sample(1,PAR_aqua2_Den,Float)'PAR Flux Density umol
	Sample(1,PAR_aqua2_Tot,Float) 'PAR Total umols
EndTable

DataTable(IMUTable, True, -1)
     TableFile ("CRD:IMU_hr",8,-1,0,60,Min,0,0)
    DataInterval(0, IMU_PERIOD_MS, msec, 0)
    Sample(16, fAccelX, Float)
EndTable

'DataTable(GPSTable, True, -1)
'    TableFile ("CRD:GPS_hr",8,-1,0,60,Min,0,0)
'    DataInterval(0, GPS_PERIOD_MS, msec, 0)
'    Sample(1, dLat, IEEE8)
'    Sample(1, dLon, IEEE8)
'    Sample(1, dHEllipsoid, IEEE8)
'    Sample(1, dHMSL, IEEE8)
'    Sample(1, fHAccuracy, IEEE4)
'    Sample(1, fVAccuracy, IEEE4)
'    Sample(1, iValidFlags, Long)
'EndTable

DataTable(WSTable, True, -1)
  TableFile ("CRD:WS_hr",8,-1,0,60,Min,0,0)
	DataInterval(0, WS_PERIOD_MS, msec, 0)
  Sample(4, fWSV1, Float)
	Sample(1, iWSDiag, Long)
	Sample(1, iWSValue, Long)
EndTable

' ___ ___  __   __ ___  __  __ __  
'| _,\ _ \/__\ / _] _ \/  \|  V  | 
'| v_/ v / \/ | [/\ v / /\ | \_/ | 
'|_| |_|_\\__/ \__/_|_\_||_|_| |_| 
'#################################
BeginProg
    SerialOpen(32, 9600, 16, 0, WS_BUFFER)      'Wind is on RS-232	
    SerialOpen(COMC7, 115200, 3, 0, GX5_BUFFER, 0) 'IMU is on RS-232
	    'For debug output:
	    'SerialOpen(COMC7, 9600, 3, 0, GX5_BUFFER, 0)
	    
    'Main loop:
    iGX5WriteIndex = 0
    iNIMUReads = 0
    iNGPSReads = 0
    iNIMU_GPSReads = 0
    iNGPS_IMUReads = 0
    iNBothErrors = 0
    iNGX5Errors = 0
    
	Scan(SCAN_PERIOD_MS, msec, 2, 0)
        iNGX5Ready = SerialInChk(COMC7)
        If (iNGX5Ready <> 0) Then
            SerialInBlock(COMC7, sGX5ComBuffer, iNGX5Ready)
            If (iGX5WriteIndex + iNGX5Ready > GX5_RESPONSE_SIZE) Then
                iGX5WriteIndex = 0
                iNGX5Errors = iNGX5Errors + 1
            Else
                MoveBytes(sGX5Buffer, iGX5WriteIndex, sGX5ComBuffer, 0, iNGX5Ready)
                iGX5WriteIndex = iGX5WriteIndex + iNGX5Ready

                'Enough bytes to look? GPS is the smaller response.
                If (iGX5WriteIndex >= GPS_RESPONSE_SIZE) Then
                    'Response: 75 65 DD LL: Confirm 75 65
                    If (GX5Byte(0) <> &h75) OR (GX5Byte(1) <> &h65) Then
                        iGX5WriteIndex = 0
                        iNGX5Errors = iNGX5Errors + 1
                    Else
                        '75 65 DD LL -> fourth byte has payload size
                        iGX5Payload = GX5Byte(3)

                        'Got just the IMU payload:
                        If (iGX5WriteIndex = IMU_RESPONSE_SIZE) AND (iGX5Payload = IMU_RESPONSE_SIZE - 6) Then
                            ParseIMU(0)
                            iGX5WriteIndex = 0
                            iNIMUReads = iNIMUReads + 1

                        'Got just the GPS payload:
                        Else If (iGX5WriteIndex = GPS_RESPONSE_SIZE) AND (iGX5Payload = GPS_RESPONSE_SIZE - 6) Then
                            ParseGPS(0)
                            iGX5WriteIndex = 0
                            iNGPSReads = iNGPSReads + 1

                        'Got both payloads: see which is first
                        Else If (iGX5WriteIndex = GX5_RESPONSE_SIZE) Then
                            If (iGX5Payload = IMU_RESPONSE_SIZE - 6) Then
                                ParseIMU(0)
                                ParseGPS(IMU_RESPONSE_SIZE)
                                iNIMU_GPSReads = iNIMU_GPSReads + 1
                            Else If (iGX5Payload = GPS_RESPONSE_SIZE - 6) Then
                                ParseGPS(0)
                                ParseIMU(GPS_RESPONSE_SIZE)
                                iNGPS_IMUReads = iNGPS_IMUReads + 1
                            Else
                                iNBothErrors = iNBothErrors + 1
                            EndIf

                            iGX5WriteIndex = 0
                        EndIf
                    EndIf
                EndIf
            EndIf
        EndIf

		'WS parsing: using checksum
		SerialInRecord(32, sWSBuffer, &h02, 0, &h0D0A, iNWSRead, 00)
        If (iNWSRead = WS_RESPONSE_SIZE) Then
		    If HexToDec(Mid(sWSBuffer, 36, 2)) = CheckSum(sWSBuffer, 9, 34) Then
                iWSDiag = Mid(sWSBuffer, 1, 2)
                iWSValue = Mid(sWSBuffer, 4, 2)
                fWSV1 = Mid(sWSBuffer, 7, 6)
                fWSV2 = Mid(sWSBuffer, 14, 6)
                fWSV3 = Mid(sWSBuffer, 21, 6)
                fWSC = Mid(sWSBuffer, 28, 6)
            EndIf
        EndIf
        
        CallTable IMUTable
		    CallTable WSTable
		    'CallTable GPSTable    NOT NEEDED
        'CallTable DebugTable  NOT NEEDED
        
NextScan
SlowSequence
Scan(2,Min,1,0) 'THIS SLOW SCAN IS DOING 4 MINUTES?? 'MetSENS300 needs at least 3 seconds of measurement time
    Battery(BattV)
    PanelTemp(PTemp,60)
    
    SDI12Recorder(EXO(1),C5,"0","C!",1,0,-1,1) 'EXO SDI12 address 0
    SDI12Recorder(MSData(),C5,"1","MC1!",1.0,0) 'MET SDI12 address 1
        AirTemp=MSData(1)
        RH=MSData(2)
        DP=MSData(3)
        BP=MSData(4)
        MetSENS_Status=MSData(5)

    ' Set diagnostic variables as needed (??)
    Move(Good_Sample,9,0,1)
    Select Case MetSENS_Status
    Case=0
      Good_Sample=1
    Case=1
      Fault_Wind=1
    Case=10
      Fault_Temperature=1
    Case=20
      Fault_Dewpoint=1
    Case=40
      Fault_Humidity=1
    Case=80
      Fault_Pressure=1
    Case=100
      Fault_Compass=1
    Else
      Fault_Undefined=1
    EndSelect
    
    CallTable MS3
    CallTable EXO_data
    CallTable Batt  

	NextScan
	SlowSequence
	Scan(5,Sec,1,0)
		'LI190R Quantum Sensor measurements 'PAR_Tot' and 'PAR_Den'
		VoltDiff(PAR_atmo_Den,1,AutorangeC,1,True,0,60,1,0) '-0.1431'
	  	If PAR_atmo_Den<0 Then PAR_atmo_Den=0
		'Calculate total flux
		'The multiplier to calculate total flux was calculated by Short Cut
		'and based on a program execution rate (scan rate) of 5 Seconds.
		'If you change the program execution rate outside of Short Cut with the CRBasic Editor
		'you will need to recalculate this multiplier. See the sensor manual for more details.
	  	PAR_atmo_Tot=PAR_atmo_Den*8.278146
		'Calculate flux density
	  	PAR_atmo_Den=PAR_atmo_Den*1655.629
		
    VoltDiff(PAR_aqua1_Den,1,AutorangeC,2,True,0,60,1,0) '-0.1431
      If PAR_aqua1_Den<0 Then PAR_aqua1_Den=0
		  PAR_aqua1_Tot=PAR_aqua1_Den*8.278146
	  	PAR_aqua1_Den=PAR_aqua1_Den*1655.629
	  	
    VoltDiff(PAR_aqua2_Den,1,AutorangeC,3,True,0,60,1,0) '-0.1431
		  If PAR_aqua2_Den<0 Then PAR_aqua2_Den=0
		  PAR_aqua2_Tot=PAR_aqua2_Den*8.278146
	  	PAR_aqua2_Den=PAR_aqua2_Den*1655.629
		
		CallTable PAR_atmo
		CallTable PAR_aqua1
		CallTable PAR_aqua2 
	NextScan
EndProg

'IMU Data:
'Linear Accel: Scaled Accelerometer Vector (0x80, 0x04), g, 14 bytes
'Angular Rate: Scaled Gyro Vector (0x80, 0x05), rad/sec, 14 bytes
'Euler Angles: CF Euler angles (0x80, 0x0C), RPY, rad, 14 bytes
'Quaternion: CF Quaternion (0x80, 0x0A), 18 bytes
'Gravity Vector: CF Stabilized Up Vector (0x80, 0x11), 14 bytes
'
'That's 6 + 14 + 14 + 14 + 18 + 14 = 80 bytes (includes checksum)
'At 20Hz that's 1600 Bps or 16,000 bps
'
'GPS Data: (collected with IMU at slower rate)
'GNSS Data: LLH Position: (0x81, 0x03), 44 bytes
'
'That's 6 + 32 = 38?? 50 bytes
'Together, both IMU and GPS responses are 130 bytes total
